/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package MyPackage;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import java.text.DateFormat;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.Vector;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
/**
 *
 * @author Mandranto
 */
public class Virement extends javax.swing.JFrame {
private static final String username = "root" ;
    private static final String password = "" ;
    private static final String dataConn = "jdbc:mysql://localhost:3306/banque" ;
    public String Receveur;
    public String Envoyeur;
    public String Identifiant;
    Connection sqlConn = null ;
    PreparedStatement pst = null ;
    PreparedStatement pst2 = null ;
    PreparedStatement pst3 = null ;
    ResultSet rs = null;
    int q, i, id, deleteItem;
    public Virement() {
        initComponents();
        Read();
        UpdatejComboBoxEnvoyeur();
        UpdatejComboBoxReceveur();
        jButtonModifierVirement.setEnabled(false);
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void print() throws SQLException, FileNotFoundException, IOException, ClassNotFoundException {
    Class.forName("com.mysql.cj.jdbc.Driver");
    sqlConn = DriverManager.getConnection(dataConn, username, password);
    
    String query = "SELECT v.IdVir AS numVirement, c1.Nom AS NomCompteE, v.numCompteE AS NumCompteE, v.numCompteR AS NumCompteD, c2.Nom AS NomCompteD, v.montant AS montant, v.dateTransfert AS dateTransfert "
            + "FROM virement v "
            + "INNER JOIN client c1 ON v.numCompteE = c1.numCompte "
            + "INNER JOIN client c2 ON v.numCompteR = c2.numCompte "
            + "WHERE v.numCompteE = ? AND v.numCompteR = ? AND v.IdVir = ?";
    
    pst = (PreparedStatement) sqlConn.prepareStatement(query);
    pst.setString(1, this.Envoyeur);
    pst.setString(2, this.Receveur);
    pst.setString(3, this.Identifiant);
    
    rs = (ResultSet) pst.executeQuery();
    
    if (rs.next()) {
        String numCompteE = rs.getString("NumCompteE");
        String numCompteD = rs.getString("NumCompteD");
        String montant = rs.getString("montant");
        String date_transfert = rs.getString("dateTransfert");
        int numVirement = rs.getInt("numVirement");
        String nomCompteE = rs.getString("NomCompteE");
        String nomCompteD = rs.getString("NomCompteD");

        Document doc = new Document();

        // Créer une boîte de dialogue pour sélectionner le répertoire de destination
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Sélectionner un répertoire");
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int userSelection = fileChooser.showSaveDialog(null);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File directory = fileChooser.getSelectedFile();
            String filePath = directory.getAbsolutePath() + "/avisVirementDe" + nomCompteE + ".pdf";

            try {
                PdfWriter.getInstance(doc, new FileOutputStream(filePath));
                doc.open();

                // Ajouter le titre avec un style personnalisé
                Font titleFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
                Paragraph title = new Paragraph("Avis de Virement", titleFont);
                title.setAlignment(Paragraph.ALIGN_CENTER);
                title.setSpacingAfter(20);
                doc.add(title);

                // Ajouter les détails du virement avec des styles personnalisés
                Font bankFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
                Font infoFont = new Font(Font.FontFamily.TIMES_ROMAN, 12);

                Paragraph bankName = new Paragraph("Nom de la Banque", bankFont);
                bankName.setAlignment(Paragraph.ALIGN_CENTER);
                doc.add(bankName);

                Paragraph date = new Paragraph("Date : " + date_transfert + "", infoFont);
                date.setAlignment(Paragraph.ALIGN_CENTER);
                doc.add(date);

                String formattedNumVirement = String.format("%03d", numVirement);

                Paragraph avisNum = new Paragraph("AVIS DE VIREMENT N°" + formattedNumVirement + "", bankFont);
                avisNum.setAlignment(Paragraph.ALIGN_CENTER);
                doc.add(avisNum);

                Paragraph accountNum = new Paragraph("N° de compte : " + numCompteE + "", infoFont);
                doc.add(accountNum);

                Paragraph clientName = new Paragraph("" + nomCompteE + "", infoFont);
                doc.add(clientName);

                Paragraph currentBalance = new Paragraph("Solde actuel : " + montant + " Ar", infoFont);
                doc.add(currentBalance);

                Paragraph A = new Paragraph("A");
                A.setAlignment(Paragraph.ALIGN_CENTER);
                A.setSpacingAfter(20);
                doc.add(A);

                Paragraph toAccountNum = new Paragraph("N° de compte : " + numCompteD + "", infoFont);
                toAccountNum.setAlignment(Paragraph.ALIGN_RIGHT);
                doc.add(toAccountNum);

                Paragraph recipientName = new Paragraph("" + nomCompteD + "", infoFont);
                recipientName.setAlignment(Paragraph.ALIGN_RIGHT);
                doc.add(recipientName);

                Paragraph transferAmount = new Paragraph("Montant : " + montant + "", infoFont);
                transferAmount.setAlignment(Paragraph.ALIGN_LEFT);
                doc.add(transferAmount);

                doc.close();

                // Afficher le chemin du fichier PDF
                System.out.println("Chemin du fichier PDF : " + filePath);

                // Ouvrir le fichier PDF après sa création
                Desktop.getDesktop().open(new File(filePath));
            } catch (DocumentException | IOException ex) {
                ex.printStackTrace();
            }
        }
    }
}



    public void Read() {
    try {
        Class.forName("com.mysql.jdbc.Driver");
        sqlConn = DriverManager.getConnection(dataConn, username, password);
        pst = sqlConn.prepareStatement("SELECT * FROM virement");

        rs = pst.executeQuery();
        ResultSetMetaData rsMetaData = rs.getMetaData();

        int columnCount = rsMetaData.getColumnCount();
        DefaultTableModel recordTable = (DefaultTableModel) jTableVirement.getModel();
        recordTable.setRowCount(0);

        while (rs.next()) {
            Vector<Object> rowData = new Vector<>();

            for (int i = 1; i <= columnCount; i++) {
                rowData.add(rs.getObject(i));
            }

            recordTable.addRow(rowData);
        }
    } catch (ClassNotFoundException | SQLException ex) {
        JOptionPane.showMessageDialog(null, ex);
    }
}
    private void UpdatejComboBoxEnvoyeur(){
    String request = "SELECT * FROM client";
    try {
        pst = sqlConn.prepareStatement(request);
        rs = pst.executeQuery();
        
        jComboBoxEnvoyeur.removeAllItems(); // Supprime tous les éléments précédents
        while(rs.next()) {
            jComboBoxEnvoyeur.addItem(rs.getString("numCompte")); // Ajoute les nouveaux éléments
        }
    } catch(SQLException e) {}
}
    private void UpdatejComboBoxReceveur() {
    String request = "SELECT * FROM client";
    try {
        pst = sqlConn.prepareStatement(request);
        rs = pst.executeQuery();
        
        jComboBoxReceveur.removeAllItems(); // Supprime tous les éléments précédents
        while(rs.next()) {
            jComboBoxReceveur.addItem(rs.getString("numCompte")); // Ajoute les nouveaux éléments
        }
    } catch(SQLException e) {}
}
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelNuméroDeCompteEnvoyeur = new javax.swing.JLabel();
        jLabelNuméroDeCompteReceveur = new javax.swing.JLabel();
        jLabelMontant = new javax.swing.JLabel();
        jTextMontant = new javax.swing.JTextField();
        jLabelDateDeTransfert = new javax.swing.JLabel();
        jTextDateDeTransfert = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableVirement = new javax.swing.JTable();
        jButtonAjouterVirement = new javax.swing.JButton();
        jButtonModifierVirement = new javax.swing.JButton();
        jButtonSupprimerVirement = new javax.swing.JButton();
        jComboBoxEnvoyeur = new javax.swing.JComboBox<>();
        jComboBoxReceveur = new javax.swing.JComboBox<>();
        jLabelMontant1 = new javax.swing.JLabel();
        jTextIdentifiant = new javax.swing.JTextField();
        jButtonPDF = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(661, 421));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelNuméroDeCompteEnvoyeur.setText("Envoyeur");

        jLabelNuméroDeCompteReceveur.setText("Receveur");

        jLabelMontant.setText("Montant à virer");

        jTextMontant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextMontantActionPerformed(evt);
            }
        });

        jLabelDateDeTransfert.setText("Date de Transfert");

        jTableVirement.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Identifiant", "Envoyeur", "Receveur", "montant", "Date de transfert"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableVirement.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableVirementMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableVirementMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTableVirement);

        jButtonAjouterVirement.setText("Virer");
        jButtonAjouterVirement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAjouterVirementActionPerformed(evt);
            }
        });

        jButtonModifierVirement.setText("Modifier");
        jButtonModifierVirement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierVirementActionPerformed(evt);
            }
        });

        jButtonSupprimerVirement.setText("Supprimer");
        jButtonSupprimerVirement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerVirementActionPerformed(evt);
            }
        });

        jComboBoxEnvoyeur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEnvoyeurActionPerformed(evt);
            }
        });

        jLabelMontant1.setText("Id Virement");

        jTextIdentifiant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextIdentifiantActionPerformed(evt);
            }
        });

        jButtonPDF.setText("Imprimer");
        jButtonPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPDFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabelDateDeTransfert, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(40, 40, 40)
                            .addComponent(jTextDateDeTransfert))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabelMontant, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelNuméroDeCompteReceveur, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelNuméroDeCompteEnvoyeur, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(40, 40, 40)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextMontant)
                                .addComponent(jComboBoxReceveur, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBoxEnvoyeur, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelMontant1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jTextIdentifiant)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonAjouterVirement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonModifierVirement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonSupprimerVirement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonPDF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(105, 105, 105))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonAjouterVirement)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelMontant1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextIdentifiant, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jButtonSupprimerVirement)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonPDF)
                        .addGap(70, 70, 70)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jComboBoxEnvoyeur, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonModifierVirement))
                            .addComponent(jLabelNuméroDeCompteEnvoyeur, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelNuméroDeCompteReceveur, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxReceveur, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelMontant, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextMontant, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelDateDeTransfert, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextDateDeTransfert, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(61, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 14, 514, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextMontantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextMontantActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextMontantActionPerformed

    private void jButtonAjouterVirementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAjouterVirementActionPerformed
         try {
    Class.forName("com.mysql.jdbc.Driver");
    sqlConn = DriverManager.getConnection(dataConn, username, password);
    sqlConn.setAutoCommit(false); // Start a transaction
    
    // Prepare the statements
    pst = sqlConn.prepareStatement("INSERT INTO virement (IdVir  ,numCompteE, numCompteR, montant, dateTransfert) VALUES (?, ?, ?, ?, ?)");
    pst2 = sqlConn.prepareStatement("UPDATE client SET Solde = Solde - ? WHERE numCompte = ?");
    pst3 = sqlConn.prepareStatement("UPDATE client SET Solde = Solde + ? WHERE numCompte = ?");
    
    // Get selected item from jComboBoxEnvoyeur
    //String selectedEnvoyeur = jComboBoxEnvoyeur.getSelectedItem().toString();
    
    // Set parameters for pst2 and pst3
    pst2.setInt(1, Integer.parseInt(jTextMontant.getText()));
    pst2.setString(2, jComboBoxEnvoyeur.getSelectedItem().toString());
    pst3.setInt(1, Integer.parseInt(jTextMontant.getText()));
    pst3.setString(2, jComboBoxReceveur.getSelectedItem().toString());
    
    // Set parameters for pst 
    pst.setString(1, jTextIdentifiant.getText());
    pst.setString(2, jComboBoxEnvoyeur.getSelectedItem().toString());
    pst.setString(3, jComboBoxReceveur.getSelectedItem().toString());
    pst.setString(4, jTextMontant.getText());
    pst.setString(5, jTextDateDeTransfert.getText());
    
    // Execute the statements
    pst.executeUpdate();
    pst2.executeUpdate();
    pst3.executeUpdate();
    
    sqlConn.commit(); // Commit the transaction
    
    JOptionPane.showMessageDialog(this, "Record Added");
    
    // Clear input fields
    jTextIdentifiant.setText("");
                jTextMontant.setText("");
                jTextDateDeTransfert.setText("");
    
    Read();
    UpdatejComboBoxEnvoyeur();
    UpdatejComboBoxReceveur();
} catch (ClassNotFoundException | SQLException ex) {
    // Rollback the transaction in case of any error
    if (sqlConn != null) {
        try {
            sqlConn.rollback();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    java.util.logging.Logger.getLogger(Virement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
} finally {
    // Enable auto-commit and close the connection
    if (sqlConn != null) {
        try {
            sqlConn.setAutoCommit(true);
            sqlConn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

    }//GEN-LAST:event_jButtonAjouterVirementActionPerformed

    private void jButtonModifierVirementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierVirementActionPerformed
         try
            {
                Class.forName("com.mysql.jdbc.Driver");
                sqlConn = DriverManager.getConnection(dataConn,username,password);
                pst = sqlConn.prepareStatement("UPDATE virement SET IdVir=? , numCompteE=? ,numCompteR=? ,montant=? ,dateTransfert=?  WHERE IdVir=? ");
               // pst2 = sqlConn.prepareStatement("UPDATE client SET Solde = Solde - ? WHERE numCompte = ?");
   // pst3 = sqlConn.prepareStatement("UPDATE client SET Solde = Solde + ? WHERE numCompte = ?");
                pst.setString(1, jTextIdentifiant.getText());
                pst.setString(2, jComboBoxEnvoyeur.getSelectedItem().toString());
                pst.setString(3, jComboBoxReceveur.getSelectedItem().toString());
                pst.setString(4, jTextMontant.getText());
                pst.setString(5, jTextDateDeTransfert.getText());
                
                pst.setString(6, jTextIdentifiant.getText());

                
                pst.executeUpdate();
                JOptionPane.showMessageDialog(this, "Record Updated");
                jTextIdentifiant.setText("");
                jTextMontant.setText("");
                jTextDateDeTransfert.setText("");
                
                Read();
                
            }
        catch(ClassNotFoundException | SQLException ex)
         {
             java.util.logging.Logger.getLogger(Virement.class.getName()).log(java.util.logging.Level.SEVERE,null,ex);
         }
    }//GEN-LAST:event_jButtonModifierVirementActionPerformed

    private void jButtonSupprimerVirementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerVirementActionPerformed
try
        {
            //id  = Integer.parseInt(RecordTable.getValueAt(SelectedRows, 0).toString());//tsy ilaina
            deleteItem = JOptionPane.showConfirmDialog(null, "Confirm if you wanna delete","warning",JOptionPane.YES_NO_OPTION);
            if(deleteItem == JOptionPane.YES_OPTION)
            {
                Class.forName("com.mysql.jdbc.Driver");
                sqlConn = DriverManager.getConnection(dataConn,username,password);
                pst = sqlConn.prepareStatement("DELETE FROM virement WHERE IdVir = ? ");
              
              pst.setString(1, jTextIdentifiant.getText());
                
                pst.executeUpdate();
                JOptionPane.showMessageDialog(this, "Record Deleted");
                Read();
                jTextIdentifiant.setText("");
                jTextMontant.setText("");
                jTextDateDeTransfert.setText("");
            }
        }
        catch(ClassNotFoundException ex)
         {
             java.util.logging.Logger.getLogger(Virement.class.getName()).log(java.util.logging.Level.SEVERE,null,ex);
         }
         catch(SQLException ex)
         {
            System.err.println(ex);
         }
    }//GEN-LAST:event_jButtonSupprimerVirementActionPerformed

    private void jComboBoxEnvoyeurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEnvoyeurActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxEnvoyeurActionPerformed

    private void jTableVirementMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableVirementMouseClicked
        DefaultTableModel recordTable = (DefaultTableModel) jTableVirement.getModel();
int selectedRow = jTableVirement.getSelectedRow();
jTextIdentifiant.setText(recordTable.getValueAt(selectedRow, 0).toString());
jComboBoxEnvoyeur.setSelectedItem(recordTable.getValueAt(selectedRow, 1).toString());
jComboBoxReceveur.setSelectedItem(recordTable.getValueAt(selectedRow, 2).toString());
jTextMontant.setText(recordTable.getValueAt(selectedRow, 3).toString());
jTextDateDeTransfert.setText(recordTable.getValueAt(selectedRow, 4).toString());

                
    }//GEN-LAST:event_jTableVirementMouseClicked

    private void jTextIdentifiantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextIdentifiantActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextIdentifiantActionPerformed

    private void jButtonPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPDFActionPerformed
    try {
        print();
        System.out.println("Impression terminée avec succès !");
    } catch (SQLException ex) {
        Logger.getLogger(Virement.class.getName()).log(Level.SEVERE, null, ex);
        System.out.println("Erreur SQL : " + ex.getMessage());
    } catch (IOException ex) {
        Logger.getLogger(Virement.class.getName()).log(Level.SEVERE, null, ex);
        System.out.println("Erreur d'entrée/sortie : " + ex.getMessage());
    } catch (ClassNotFoundException ex) {
        Logger.getLogger(Virement.class.getName()).log(Level.SEVERE, null, ex);
        System.out.println("Erreur de classe non trouvée : " + ex.getMessage());
    }
    }//GEN-LAST:event_jButtonPDFActionPerformed

    private void jTableVirementMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableVirementMouseReleased
        int row = jTableVirement.getSelectedRow();
        if (row != -1) {
            this.Identifiant = (jTableVirement.getModel().getValueAt(row, 0).toString());
            this.Envoyeur = (jTableVirement.getModel().getValueAt(row, 1).toString());
            this.Receveur = (jTableVirement.getModel().getValueAt(row, 2).toString());
        //public String Receveur;
    //public String Envoyeur;
    //public String Identifiant;
        }
    }//GEN-LAST:event_jTableVirementMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Virement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Virement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Virement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Virement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Virement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAjouterVirement;
    private javax.swing.JButton jButtonModifierVirement;
    private javax.swing.JButton jButtonPDF;
    private javax.swing.JButton jButtonSupprimerVirement;
    private javax.swing.JComboBox<String> jComboBoxEnvoyeur;
    private javax.swing.JComboBox<String> jComboBoxReceveur;
    private javax.swing.JLabel jLabelDateDeTransfert;
    private javax.swing.JLabel jLabelMontant;
    private javax.swing.JLabel jLabelMontant1;
    private javax.swing.JLabel jLabelNuméroDeCompteEnvoyeur;
    private javax.swing.JLabel jLabelNuméroDeCompteReceveur;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableVirement;
    private javax.swing.JTextField jTextDateDeTransfert;
    private javax.swing.JTextField jTextIdentifiant;
    private javax.swing.JTextField jTextMontant;
    // End of variables declaration//GEN-END:variables
}
